package se.kth.peiyan.cimCracker;

import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.SwingWorker;
import javax.swing.event.TreeModelListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.CDATASection;
import org.w3c.dom.CharacterData;
import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;
import org.xml.sax.SAXException;

/**
 * The panel rendering a XML file
 * <p>modified on example from book "Core Java volume II" authored by Cay Horstmann</p>
 * 
 * @author peiyan Li
 * @version 0.1, May 16, 2015
 */
public class PnlXMLviewer extends javax.swing.JPanel
{
    private final MainFrame parentFrame;
    private final File file;
    private DocumentBuilder builder;

    /**
     * Creates new form XMLviewer
     */
    public PnlXMLviewer(MainFrame parentFrame, File file)
    {
        this.parentFrame = parentFrame;
        this.file = file;
        
        
        new SwingWorker<Document, Void>()
	{
            @Override
            protected Document doInBackground() throws ParserConfigurationException, SAXException, IOException
            {
                if (builder == null)
		{
                    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                    builder = factory.newDocumentBuilder();
		}
		return builder.parse(file);
            }
			
            @Override
            protected void done()
            {
		try
		{
                    Document doc = get();
                    parentFrame.setDoc(doc);
                    JTree tree = new JTree(new DOMTreeModel(doc));
                    tree.setCellRenderer(new DOMTreeCellRenderer());
                    jScrollPane = new JScrollPane(tree);
                    initComponents();
                    validate();
		} catch (InterruptedException | ExecutionException ex)
                {
                    Logger.getLogger(PnlXMLviewer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
	}.execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane = jScrollPane;
        pnlHeader = new javax.swing.JPanel();
        javax.swing.JSeparator jSeparator1 = new javax.swing.JSeparator();
        javax.swing.JLabel lblHeader = new javax.swing.JLabel();

        lblHeader.setText("XML Viewer");

        javax.swing.GroupLayout pnlHeaderLayout = new javax.swing.GroupLayout(pnlHeader);
        pnlHeader.setLayout(pnlHeaderLayout);
        pnlHeaderLayout.setHorizontalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlHeaderLayout.createSequentialGroup()
                        .addComponent(lblHeader)
                        .addContainerGap(506, Short.MAX_VALUE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
        pnlHeaderLayout.setVerticalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jScrollPane)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JPanel pnlHeader;
    // End of variables declaration//GEN-END:variables
}
class DOMTreeModel implements TreeModel
{
    private Document doc;

    public DOMTreeModel(Document doc)
    {
        this.doc = doc;
    }
    
    @Override
    public Object getRoot()
    {
        return doc.getDocumentElement();
    }

    @Override
    public Object getChild(Object parent, int index)
    {
        Node node = (Node) parent;
        NodeList nodeList = node.getChildNodes();
        return nodeList.item(index);
    }

    @Override
    public int getChildCount(Object parent)
    {
        Node node = (Node) parent;
        NodeList nodeList = node.getChildNodes();
        return nodeList.getLength();
    }

    @Override
    public boolean isLeaf(Object node)
    {
        return getChildCount(node) == 0;
    }

    @Override
    public void valueForPathChanged(TreePath path, Object newValue)
    {
        // DO NOTHING
    }

    @Override
    public int getIndexOfChild(Object parent, Object child)
    {
        Node parentNode = (Node) parent;
        NodeList nodeList = parentNode.getChildNodes();
        for (int i = 0; i < nodeList.getLength(); i++)
        {
            if (getChild(parentNode, i) == child)
                return i;
        }
        return -1;
    }

    @Override
    public void addTreeModelListener(TreeModelListener l)
    {
        // DO NOTHING
    }

    @Override
    public void removeTreeModelListener(TreeModelListener l)
    {
        // DO NOTHING
    }
    
}

class DOMTreeCellRenderer extends DefaultTreeCellRenderer
{

    @Override
    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus)
    {
        Node node = (Node) value;
        if (node instanceof Element)
            return elementPanel((Element) node);
        super.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);
        if (node instanceof CharacterData)
	    setText(characterString((CharacterData) node));
	else
	    setText(node.getClass() + ": " + node.toString());
        
        return this;
    }
    
    private String characterString(CharacterData node)
    {
        StringBuilder builder = new StringBuilder(node.getData());
        for (int i = 0; i < builder.length(); i++)
	{
	    if (builder.charAt(i) == '\r')
	    {
	        builder.replace(i, i + 1, "\\r");
	        i++;
	    }
	    else if (builder.charAt(i) == '\n')
	    {
	        builder.replace(i, i + 1, "\\n");
	        i++;
	    }
	    else if (builder.charAt(i) == '\t')
	    {
	        builder.replace(i, i + 1, ""/*"\\t"*/);
	        i++;
	    }
	}
	if (node instanceof CDATASection) builder.insert(0, "CDATASection: ");
	else if (node instanceof Text) builder.insert(0, "Text: ");
	else if (node instanceof Comment) builder.insert(0, "Comment: ");

	return builder.toString();
    }
    
    private Component elementPanel(Element e)
    {
	JPanel panel = new JPanel();
	panel.add(new JLabel("Element: " + e.getTagName()));
	final NamedNodeMap map = e.getAttributes();
	panel.add(new JTable(new AbstractTableModel()
	{
	    public int getRowCount()
	    {
	        return map.getLength();
	    }

	    public int getColumnCount()
	    {
	        return 2;
	    }

	    public Object getValueAt(int r, int c)
	    {
	        return c == 0 ? map.item(r).getNodeName() : map.item(r).getNodeValue();
	    }
	}));
	return panel;
    }
}