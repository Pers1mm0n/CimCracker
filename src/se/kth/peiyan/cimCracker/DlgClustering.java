package se.kth.peiyan.cimCracker;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.AbstractListModel;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.SwingWorker;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;

/**
 * A class for Clustering inquiring dialog
 * 
 * @author peiyanli
 * @version 0.1, June 12, 2015
 */
public class DlgClustering extends javax.swing.JDialog
{

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    /**
     * Creates new form NewOkCancelDialog
     */
    public DlgClustering(java.awt.Frame parent, boolean modal, DataAnalyzer analyzer)
    {
        super(parent, modal);
        this.selectedAttributes = new ArrayList<>();
        this.analyzer = analyzer;
        this.tables = analyzer.getTable();
        initComponents();

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction()
        {
            public void actionPerformed(ActionEvent e)
            {
                doClose(RET_CANCEL);
            }
        });
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus()
    {
        return returnStatus;
    }

    /**
     * @return get the dataObject - the program's inner data structure
     */
    public ArrayList<DataObject> getDataObjects()
    {
        return dataObjects;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        javax.swing.JLabel lblDescription = new javax.swing.JLabel();
        javax.swing.JLabel lblKNumber = new javax.swing.JLabel();
        javax.swing.JSeparator jSeparator1 = new javax.swing.JSeparator();
        tfdKNumber = new javax.swing.JTextField();
        javax.swing.JLabel lblDescription1 = new javax.swing.JLabel();
        javax.swing.JSeparator jSeparator2 = new javax.swing.JSeparator();
        javax.swing.JSeparator jSeparator3 = new javax.swing.JSeparator();
        javax.swing.JLabel lblDescription2 = new javax.swing.JLabel();
        javax.swing.JLabel lblTable = new javax.swing.JLabel();
        cmbTable = new javax.swing.JComboBox();
        rdbtnRandomInitialization = new javax.swing.JRadioButton();
        btnAdd = new javax.swing.JButton();
        btnAddAll = new javax.swing.JButton();
        btnMinus = new javax.swing.JButton();
        btnMinusAll = new javax.swing.JButton();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        lstAttributes = new javax.swing.JList();
        javax.swing.JScrollPane jScrollPane3 = new javax.swing.JScrollPane();
        lstSelectedAttributes = new javax.swing.JList();
        javax.swing.JLabel lblDescription3 = new javax.swing.JLabel();

        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelButtonActionPerformed(evt);
            }
        });

        lblDescription.setText("<html><font color=\"#383838\">K-mean clustering</font></html>");

        lblKNumber.setText("Number of K: ");

        tfdKNumber.setColumns(5);
        tfdKNumber.setText("4");

        lblDescription1.setText("<html><font color=\"#383838\">K-mean training data</font></html>");

        lblDescription2.setText("<html><font color=\"#383838\">K-mean algorithm</font></html>");

        lblTable.setText("Table");

        cmbTable.setModel(new javax.swing.DefaultComboBoxModel(tables));
        cmbTable.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                cmbTableItemStateChanged(evt);
            }
        });

        rdbtnRandomInitialization.setText("Using random initialization");

        btnAdd.setText(">");
        btnAdd.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAddActionPerformed(evt);
            }
        });

        btnAddAll.setText(">>");
        btnAddAll.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAddAllActionPerformed(evt);
            }
        });

        btnMinus.setText("<");
        btnMinus.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnMinusActionPerformed(evt);
            }
        });

        btnMinusAll.setText("<<");
        btnMinusAll.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnMinusAllActionPerformed(evt);
            }
        });

        lstAttributes.setModel(new AttributeSelectionModel(analyzer, (String) cmbTable.getSelectedItem()));
        jScrollPane1.setViewportView(lstAttributes);

        lstSelectedAttributes.setModel(new SelectedAttributeSelectionModel(selectedAttributes));
        jScrollPane3.setViewportView(lstSelectedAttributes);

        lblDescription3.setText("<html><font color=\"#383838\">select this option can efficiently avoid being traped in local optima</font></html>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDescription2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblKNumber)
                            .addComponent(lblDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(lblDescription1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(lblTable)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(135, 135, 135)
                                .addComponent(tfdKNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAdd)
                            .addComponent(btnAddAll)
                            .addComponent(btnMinus)
                            .addComponent(btnMinusAll))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(lblDescription3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(rdbtnRandomInitialization))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, jScrollPane3});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(lblDescription1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMinus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMinusAll)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDescription, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKNumber)
                    .addComponent(tfdKNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDescription2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbtnRandomInitialization)
                .addGap(0, 0, 0)
                .addComponent(lblDescription3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * performed action for ok button
     * 
     * @param evt 
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        final int kNumber;
        final boolean isRandomInitializationNeeded;
        selectedAttributes = new ArrayList<>();
        // get attributes
        List<String> allList = ((SelectedAttributeSelectionModel) lstSelectedAttributes.getModel()).getList();
        allList.stream().forEach((String attribute) -> selectedAttributes.add(attribute));
        //System.out.println(selectedAttributes.toString());
        
        // get K
        String text = tfdKNumber.getText();
        try{
            if (!text.isEmpty())
            {
                kNumber = Integer.parseInt(text);
                if (kNumber < 1)
                    throw new Exception();
            } else
                throw new Exception();
        } catch (Exception ex)
        {
            JOptionPane.showMessageDialog(this, "'Number of K' contains invalid content", null, JOptionPane.WARNING_MESSAGE);
            return;
        }
        //System.out.println(kNumber);
        
        // get if the randaom initalization is needed
        isRandomInitializationNeeded = rdbtnRandomInitialization.isSelected();
        //System.out.println(isRandomInitializationNeeded);
        
        
        NoButtonDialog noButtonDialog = new NoButtonDialog((JFrame) DlgClustering.this.getParent(), "Be patient. I am analyzing......o.O");
        noButtonDialog.setLocationRelativeTo(DlgClustering.this);
        noButtonDialog.setAlwaysOnTop(true);
        noButtonDialog.setVisible(true);
        noButtonDialog.validate();
        
        // set up a new thread
        SwingWorker<ArrayList<DataObject>, Void> worker = new SwingWorker<ArrayList<DataObject>, Void>()
        {
            
            @Override
            protected ArrayList<DataObject> doInBackground() throws ParserConfigurationException, SAXException, IOException
            {
                ArrayList<DataObject> returnValue = analyzer.updateDataObjects(selectedAttributes, (String) cmbTable.getSelectedItem());
                ArrayList<Centroid> centroids = analyzer.updateCluster(returnValue, kNumber, isRandomInitializationNeeded);
                return returnValue;
            }
            
            @Override
            protected void done()
            {
                try
                {
                    dataObjects = get();
                    noButtonDialog.setVisible(false);
                    noButtonDialog.dispose();
                    doClose(RET_OK); // finish and exit this dialog
                } catch (InterruptedException | ExecutionException ex)
                {
                    Logger.getLogger(DlgClustering.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        };
        worker.execute();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    /**
     * action performed when combo box selection changed
     * 
     * @param evt 
     */
    private void cmbTableItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_cmbTableItemStateChanged
    {//GEN-HEADEREND:event_cmbTableItemStateChanged
        lstAttributes.setModel(new AttributeSelectionModel(analyzer, (String) cmbTable.getSelectedItem()));
        selectedAttributes = new ArrayList<>();
        lstSelectedAttributes.setModel(new SelectedAttributeSelectionModel(selectedAttributes));
    }//GEN-LAST:event_cmbTableItemStateChanged

    /**
     * action performed when clicking '&gt;' button
     * 
     * @param evt 
     */
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddActionPerformed
    {//GEN-HEADEREND:event_btnAddActionPerformed
        List<String> selectedList = lstAttributes.getSelectedValuesList();
        int[] selectedIndices = lstAttributes.getSelectedIndices();
       
        // remove selected items in the left JList
        int i = 0; // after removing the first attribute at top, and the 2nd attribute becomes the top
        for (int index : selectedIndices)
        {
            ((AttributeSelectionModel) lstAttributes.getModel()).remove(index-i);
            i++;
        }
        lstAttributes.repaint();
        
        // update contents in the right JList
        selectedList.stream().forEach((String attribute) -> selectedAttributes.add(attribute));
        lstSelectedAttributes.setModel(new SelectedAttributeSelectionModel(selectedAttributes));
    }//GEN-LAST:event_btnAddActionPerformed

    /**
     * action performed when clicking '&lt;' button
     * 
     * @param evt 
     */
    private void btnMinusActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnMinusActionPerformed
    {//GEN-HEADEREND:event_btnMinusActionPerformed
        int[] selectedIndices = lstSelectedAttributes.getSelectedIndices();
        
        // remove selected items in the right JList
        int i = 0; // after removing the first attribute at top, and the 2nd attribute becomes the top
        for (int index : selectedIndices)
        {
            ((SelectedAttributeSelectionModel) lstSelectedAttributes.getModel()).remove(index-i);
            i++;
        }
        lstSelectedAttributes.repaint();
        
        // update contents in the left JList
        ArrayList<String> remainedList = ((SelectedAttributeSelectionModel) lstSelectedAttributes.getModel()).getList();
        AttributeSelectionModel leftModel = new AttributeSelectionModel(analyzer, (String) cmbTable.getSelectedItem());
        remainedList.stream().forEach((String attribute) ->
        {
            leftModel.remove(attribute);
        });
        lstAttributes.setModel(leftModel);
        lstAttributes.repaint();
    }//GEN-LAST:event_btnMinusActionPerformed

    /**
     * action performed when clicking '&gt;&gt;' button
     * 
     * @param evt 
     */
    private void btnAddAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddAllActionPerformed
    {//GEN-HEADEREND:event_btnAddAllActionPerformed
        List<String> allList = ((AttributeSelectionModel) lstAttributes.getModel()).getList();
        // update contents in the right JList
        allList.stream().forEach((String attribute) -> selectedAttributes.add(attribute));
        lstSelectedAttributes.setModel(new SelectedAttributeSelectionModel(selectedAttributes));
        
        
        // remove selected items in the left JList
        ArrayList<String> remainedList = ((SelectedAttributeSelectionModel) lstSelectedAttributes.getModel()).getList();
        AttributeSelectionModel leftModel = new AttributeSelectionModel(analyzer, (String) cmbTable.getSelectedItem());
        remainedList.stream().forEach((String attribute) ->
        {
            leftModel.remove(attribute);
        });
        lstAttributes.setModel(leftModel);
        lstAttributes.repaint();
    }//GEN-LAST:event_btnAddAllActionPerformed

    /**
     * action performed when clicking '&lt;&lt;' button
     * 
     * @param evt 
     */
    private void btnMinusAllActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnMinusAllActionPerformed
    {//GEN-HEADEREND:event_btnMinusAllActionPerformed
        // update contents in the left JList
        lstAttributes.setModel(new AttributeSelectionModel(analyzer, (String) cmbTable.getSelectedItem()));

        // remove selected items in the right JList
        selectedAttributes = new ArrayList<>();
        lstSelectedAttributes.setModel(new SelectedAttributeSelectionModel(selectedAttributes));
    }//GEN-LAST:event_btnMinusAllActionPerformed
    
    private void doClose(int retStatus)
    {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
     * @return analyzer
     */
    public DataAnalyzer getAnalyzer()
    {
        return analyzer;
    }

    /**
     * @return selected attributes used for data clustering
     */
    public ArrayList<String> getSelectedAttributes()
    {
        return selectedAttributes;
    }
    
    /**
     *  a private inner class for left JList model, rendering the candidate attributes
     */
    private class AttributeSelectionModel extends AbstractListModel<String>
    {
        
        private DataAnalyzer analyzer;
        private ArrayList<String> attributes = new ArrayList<>();

        public AttributeSelectionModel(DataAnalyzer analyzer,String selectedTable)
        {
            this.analyzer = analyzer;
            String[] names = analyzer.getNames(selectedTable);
            for (String name : names)
            {
                attributes.add(name);
            }
        }

        
        @Override
        public int getSize()
        {
            return attributes.size();
        }

        @Override
        public String getElementAt(int index)
        {
            return attributes.get(index);
        }
        
        /**
         * remove the attribute at specific location
         * @param index 
         */
        public void remove(int index)
        {
            attributes.remove(index);
        }
        
        /**
         * remove specific element in the list
         * @param attribute 
         */
        public void remove(String attribute)
        {
            attributes.remove(attribute);
        }
        
        /**
         * @return attributes arrayList
         */
        public ArrayList<String> getList()
        {
            return attributes;
        }
        
    }
    
    /**
     *  a private inner class for left JList model, rendering the candidate attributes
     */
    private class SelectedAttributeSelectionModel extends AbstractListModel<String>
    {
        private ArrayList<String> attributes;

        public SelectedAttributeSelectionModel(ArrayList<String> selectedNames)
        {
            attributes = selectedNames;
        }
        
        @Override
        public int getSize()
        {
            return attributes.size();
        }

        @Override
        public String getElementAt(int index)
        {
            return attributes.get(index);
        }
        
        /**
         * remove the attribute at specific location
         * @param index 
         */
        public void remove(int index)
        {
            attributes.remove(index);
        }

        /**
         * @return attributes arrayList
         */
        public ArrayList<String> getList()
        {
            return attributes;
        }
        
    }
    
    /**
     * the modelless dialog without OK or Cancel button
     */
    private class NoButtonDialog extends JDialog
    {
        public NoButtonDialog(java.awt.Frame parent, String message)
        {
            super(parent, false);
            this.message = message;
            initComponents();
        }

        /**
         * This method is called from within the constructor to initialize the form.
         * WARNING: Do NOT modify this code. The content of this method is always
         * regenerated by the Form Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents()
    {

        lblMessage = new javax.swing.JLabel(message);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(92, Short.MAX_VALUE)
                .addComponent(lblMessage)
                .addContainerGap(92, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(lblMessage)
                .addGap(35, 35, 35))
        );
        
        lblMessage.repaint();
        pack();
    }// </editor-fold>                        

        // Variables declaration - do not modify                     
        private javax.swing.JLabel lblMessage;
        // End of variables declaration                   
        private final String message;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddAll;
    private javax.swing.JButton btnMinus;
    private javax.swing.JButton btnMinusAll;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox cmbTable;
    private javax.swing.JList lstAttributes;
    private javax.swing.JList lstSelectedAttributes;
    private javax.swing.JButton okButton;
    private javax.swing.JRadioButton rdbtnRandomInitialization;
    private javax.swing.JTextField tfdKNumber;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;
    private DataAnalyzer analyzer;
    private String[] tables;
    private ArrayList<String> selectedAttributes;
    private ArrayList<DataObject> dataObjects;
}
