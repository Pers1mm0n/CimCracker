package se.kth.peiyan.cimCracker;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.w3c.dom.Document;

/**
 * this is the entry of the whole application as well the frame of the whole UI
 * 
 * @author peiyanli
 * @version 0.1, May 16, 2015
 */
public class MainFrame extends javax.swing.JFrame
{
    /**
     * Creates new form mainFrame
     */
    public MainFrame()
    {
        pnlMain = new javax.swing.JPanel(new java.awt.BorderLayout());
        pnlMain.setBorder(BorderFactory.createEtchedBorder());
        pnlMain.add(new PnlInitial(), java.awt.BorderLayout.CENTER);
        initComponents();
        pack();
        lblProcessInfo.setText("Ready");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        pnlProcessInfo = new javax.swing.JPanel();
        lblProcessInfo = new javax.swing.JLabel();
        pnlMain = pnlMain;
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu mnFile = new javax.swing.JMenu();
        javax.swing.JMenuItem mntmOpenCim = new javax.swing.JMenuItem();
        javax.swing.JMenuItem mntmSetDatabase = new javax.swing.JMenuItem();
        javax.swing.JPopupMenu.Separator jSeparator1 = new javax.swing.JPopupMenu.Separator();
        javax.swing.JMenuItem mntmExit = new javax.swing.JMenuItem();
        javax.swing.JMenu mnView = new javax.swing.JMenu();
        mntmXMLViwer = new javax.swing.JMenuItem();
        mntmOpenDatabase = new javax.swing.JMenuItem();
        javax.swing.JMenu mnData = new javax.swing.JMenu();
        mntmExportData = new javax.swing.JMenuItem();
        javax.swing.JMenu mnDataManipulation = new javax.swing.JMenu();
        mntmTransMatrix = new javax.swing.JMenuItem();
        javax.swing.JMenu mnHelp = new javax.swing.JMenu();
        javax.swing.JMenuItem mntmAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlProcessInfo.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        pnlProcessInfo.add(lblProcessInfo);

        mnFile.setText("File");

        mntmOpenCim.setText("Open cim File");
        mntmOpenCim.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mntmOpenCimActionPerformed(evt);
            }
        });
        mnFile.add(mntmOpenCim);

        mntmSetDatabase.setText("Set/reset Database");
        mntmSetDatabase.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mntmSetDatabaseActionPerformed(evt);
            }
        });
        mnFile.add(mntmSetDatabase);
        mnFile.add(jSeparator1);

        mntmExit.setText("Exit");
        mntmExit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mntmExitActionPerformed(evt);
            }
        });
        mnFile.add(mntmExit);

        menuBar.add(mnFile);

        mnView.setText("View");

        mntmXMLViwer.setText("XML Viewer");
        mntmXMLViwer.setEnabled(false);
        mntmXMLViwer.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mntmXMLViwerActionPerformed(evt);
            }
        });
        mnView.add(mntmXMLViwer);

        mntmOpenDatabase.setText("Database Viewer");
        mntmOpenDatabase.setEnabled(false);
        mntmOpenDatabase.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mntmOpenDatabaseActionPerformed(evt);
            }
        });
        mnView.add(mntmOpenDatabase);

        menuBar.add(mnView);

        mnData.setText("Data");

        mntmExportData.setText("Export Data");
        mntmExportData.setEnabled(false);
        mntmExportData.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mntmExportDataActionPerformed(evt);
            }
        });
        mnData.add(mntmExportData);

        mnDataManipulation.setText("Calculations");

        mntmTransMatrix.setText("Y Matrix Calculation (beta)");
        mntmTransMatrix.setEnabled(false);
        mntmTransMatrix.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mntmTransMatrixActionPerformed(evt);
            }
        });
        mnDataManipulation.add(mntmTransMatrix);

        mnData.add(mnDataManipulation);

        menuBar.add(mnData);

        mnHelp.setText("Help");

        mntmAbout.setText("About");
        mntmAbout.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                mntmAboutActionPerformed(evt);
            }
        });
        mnHelp.add(mntmAbout);

        menuBar.add(mnHelp);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlProcessInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 669, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(pnlProcessInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * update the main panel in the main Frame
     * 
     * @param panel the panel need to replace the former panel
     */
    public void update(JPanel panel)
    {
        int width = pnlMain.getWidth();
        int height = pnlMain.getHeight();
        pnlMain.removeAll();
        pnlMain.setLayout(new java.awt.BorderLayout());
        pnlMain.add(panel, java.awt.BorderLayout.CENTER);
        pnlMain.setSize(width, height);
    }

    /**
     * set the document
     * 
     * @param doc parsed document
     */
    public void setDoc(Document doc)
    {
        this.doc = doc;
    }

    /**
     * get the document
     * 
     * @return document
     */
    public Document getDoc()
    {
        return doc;
    }
    
    private void mntmExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmExitActionPerformed
        exitAfterAlert();
    }//GEN-LAST:event_mntmExitActionPerformed

    private void exitAfterAlert()
    {
        int confirm = JOptionPane.showConfirmDialog(this, "Exist?", null, JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (confirm == 0)
        {
            System.exit(0);
        }
    }
    
    private void mntmSetDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmSetDatabaseActionPerformed
        if (connDialog == null)
            connDialog = new DlgDatabaseChooser(this, true);
        
        connDialog.setVisible(true);
        
        if (connDialog.getReturnStatus() == DlgDatabaseChooser.RET_OK)
        {
            lblProcessInfo.setText("Connecting to database");
            databaseAnalyzer = new DataAnalyzer(connDialog.getConn(),this);
            if (databaseAnalyzer.isConnSuccess())
            {
                lblProcessInfo.setText("Connect to database successful");
                mntmOpenDatabase.setEnabled(true);
                isDataExportEnable += 0b10;
                if (isDataExportEnable == 0b11)
                    mntmExportData.setEnabled(true);
                dbViewer = new PnlTableViewer(this, databaseAnalyzer);
                Component component = pnlMain.getComponent(0);
                if (component instanceof PnlTableViewer)
                {
                    update(new PnlTableViewer(this, databaseAnalyzer));
                    setPocessLabel("Table updated");
                }
                return;
            }
            
            lblProcessInfo.setText("<html><font color=\"red\">Connection to database failed</font></html>");
        }
    }//GEN-LAST:event_mntmSetDatabaseActionPerformed
    
    /**
     * set the processing state label at lower-left corner
     * 
     * @param state processing sate description
     */
    public void setPocessLabel(String state)
    {
        lblProcessInfo.setText(state);
    }
    
    private void mntmOpenDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmOpenDatabaseActionPerformed
        //String[] tables = databaseAnalyzer.getTable();
        
        //if (dbTableDialog == null)
        //    dbTableDialog = new DlgDatabaseColumnChooser(this, true, tables);
        //
        //dbTableDialog.setVisible(true);
        //
        //if (dbTableDialog.getReturnStatus() == DlgDatabaseColumnChooser.RET_OK)
        //{
            //String selectedTable = dbTableDialog.getSelectedTable();
        if (dbViewer == null)
            dbViewer = new PnlTableViewer(this, databaseAnalyzer);
        update(dbViewer);
        this.repaint();
        setPocessLabel("Table Viewer opened");
        //}
    }//GEN-LAST:event_mntmOpenDatabaseActionPerformed

    private void mntmOpenCimActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mntmOpenCimActionPerformed
    {//GEN-HEADEREND:event_mntmOpenCimActionPerformed
        if (fileChooser == null)
            fileChooser = new JFileChooser();
        
        fileChooser.setCurrentDirectory(new File("."));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("cim File (xml like)", "xml"));
        fileChooser.setAcceptAllFileFilterUsed(false);
        
        if (fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
            return;
        
        final File file = fileChooser.getSelectedFile();
        mntmXMLViwer.setEnabled(true);
        mntmTransMatrix.setEnabled(true);
        isDataExportEnable += 0b1;
        if (isDataExportEnable == 0b11)
            mntmExportData.setEnabled(true);
        xmLviewer = new PnlXMLviewer(this, file);
        update(xmLviewer);
        
        pnlDataExport = null;
        setPocessLabel("XML Viewer opened");
    }//GEN-LAST:event_mntmOpenCimActionPerformed

    private void mntmXMLViwerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mntmXMLViwerActionPerformed
    {//GEN-HEADEREND:event_mntmXMLViwerActionPerformed
        update(xmLviewer);
        this.repaint();
    }//GEN-LAST:event_mntmXMLViwerActionPerformed

    private void mntmExportDataActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mntmExportDataActionPerformed
    {//GEN-HEADEREND:event_mntmExportDataActionPerformed
        dbViewer = null;
        if (pnlDataExport == null)
        {
            xmlExporter = new XMLExporter(doc);
            StringVector cimObjectNames = xmlExporter.getCimObjectNames();
            Vector<Vector<String>> cimObjects = xmlExporter.getCimObjects();
            
            pnlDataExport = new PnlDataExport(cimObjectNames, cimObjects, databaseAnalyzer, this);
        }
        update(pnlDataExport);
        this.repaint();
        setPocessLabel("Export panel opened");
    }//GEN-LAST:event_mntmExportDataActionPerformed

    private void mntmTransMatrixActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mntmTransMatrixActionPerformed
    {//GEN-HEADEREND:event_mntmTransMatrixActionPerformed
        DlgResult dlgResult = new DlgResult(this, false);
        dlgResult.setLocationRelativeTo(this);
        dlgResult.setVisible(true);
    }//GEN-LAST:event_mntmTransMatrixActionPerformed

    private void mntmAboutActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_mntmAboutActionPerformed
    {//GEN-HEADEREND:event_mntmAboutActionPerformed
        DlgAboutInfo aboutInfo = new DlgAboutInfo(this, false);
        aboutInfo.setLocationRelativeTo(this);
        aboutInfo.setVisible(true);
    }//GEN-LAST:event_mntmAboutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
    	/*
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        */
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame frame = new MainFrame();
                Toolkit toolkit = Toolkit.getDefaultToolkit();
                Dimension dimension = toolkit.getScreenSize();
                frame.setLocation(dimension.width / 3, dimension.height / 6);
                frame.setTitle("CimCraker");
                frame.setDefaultCloseOperation(javax.swing.JFrame.DO_NOTHING_ON_CLOSE);
                frame.addWindowListener(new WindowAdapter()
                {
                    @Override
                    public void windowClosing(WindowEvent e) {
                        frame.exitAfterAlert();
                    }
                    
                });
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblProcessInfo;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem mntmExportData;
    private javax.swing.JMenuItem mntmOpenDatabase;
    private javax.swing.JMenuItem mntmTransMatrix;
    private javax.swing.JMenuItem mntmXMLViwer;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlProcessInfo;
    // End of variables declaration//GEN-END:variables
    private DlgDatabaseChooser connDialog;
    private DataAnalyzer databaseAnalyzer;
    private DlgDatabaseColumnChooser dbTableDialog;
    private JFileChooser fileChooser;
    private PnlXMLviewer xmLviewer;
    private PnlTableViewer dbViewer;
    private PnlDataExport pnlDataExport;
    private int isDataExportEnable;
    private Document doc;
    private XMLExporter xmlExporter;
}
